{"version":3,"file":"lib_index_js.0f0d04cc02bd3bc33fe4.js","mappings":"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","sources":["webpack://data_bridge/./src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n// @ts-nocheck\nimport {\n    JupyterFrontEnd,\n    JupyterFrontEndPlugin\n} from \"@jupyterlab/application\";\n\nimport { IKernelConnection } from \"@jupyterlab/services/lib/kernel/kernel\";\nimport { NotebookPanel, INotebookTracker } from \"@jupyterlab/notebook\";\nimport { IframeMessageSchema } from \"@mat3ra/esse/lib/js/types\";\n\n/**\n * Initialization data for the data-bridge extension.\n * Similar to https://jupyterlite.readthedocs.io/en/latest/howto/configure/advanced/iframe.html\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n    id: \"data-bridge:plugin\",\n    description:\n        \"Extension to pass JSON data between host page and Jupyter Lite instance\",\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: async (app: JupyterFrontEnd, notebookTracker: INotebookTracker) => {\n        console.log(\"JupyterLab extension data-bridge is activated!\");\n\n        // Variable to hold the data from the host page\n        let dataFromHost = \"\";\n        // When data is loaded into the kernel, save it into this object to later check it to avoid reloading the same data\n        const kernelsDataFromHost: { [id: string]: string } = {};\n\n        const MESSAGE_GET_DATA_CONTENT = {\n            type: \"from-iframe-to-host\",\n            action: \"get-data\",\n            payload: {}\n        };\n\n        // On JupyterLite startup send get-data message to the host to request data\n        window.parent.postMessage(MESSAGE_GET_DATA_CONTENT, \"*\");\n\n        /**\n         * Listen for the current notebook being changed, and on kernel status change load the data into the kernel\n         */\n        notebookTracker.currentChanged.connect(\n            // @ts-ignore\n            async (sender, notebookPanel: NotebookPanel) => {\n                if (notebookPanel) {\n                    console.debug(\"Notebook opened\", notebookPanel.context.path);\n                    await notebookPanel.sessionContext.ready;\n                    const sessionContext = notebookPanel.sessionContext;\n\n                    sessionContext.session?.kernel?.statusChanged.connect(\n                        (kernel, status) => {\n                            if (\n                                status === \"idle\" &&\n                                kernelsDataFromHost[kernel.id] !== dataFromHost\n                            ) {\n                                loadData(kernel, dataFromHost);\n                                // Save data for the current kernel to avoid reloading the same data\n                                kernelsDataFromHost[kernel.id] = dataFromHost;\n                            }\n                            // Reset the data when the kernel is restarting, since the loaded data is lost\n                            if (status === \"restarting\") {\n                                kernelsDataFromHost[kernel.id] = \"\";\n                            }\n                        }\n                    );\n                }\n            }\n        );\n\n        /**\n         * Send data to the host page\n         * @param data\n         */\n        // @ts-ignore\n        window.sendDataToHost = (data: object) => {\n            const MESSAGE_SET_DATA_CONTENT = {\n                type: \"from-iframe-to-host\",\n                action: \"set-data\",\n                payload: data\n            };\n            window.parent.postMessage(MESSAGE_SET_DATA_CONTENT, \"*\");\n        };\n\n        /**\n         * Listen for messages from the host page, and update the data in the kernel\n         * @param event MessageEvent\n         */\n        window.addEventListener(\n            \"message\",\n            async (event: MessageEvent<IframeMessageSchema>) => {\n                if (event.data.type === \"from-host-to-iframe\") {\n                    dataFromHost = JSON.stringify(event.data.payload);\n                    const notebookPanel = notebookTracker.currentWidget;\n                    await notebookPanel?.sessionContext.ready;\n                    const sessionContext = notebookPanel?.sessionContext;\n                    const kernel = sessionContext?.session?.kernel;\n                    if (kernel) {\n                        loadData(kernel, dataFromHost);\n                    }\n                }\n            }\n        );\n\n        /**\n         * Load the data into the kernel by executing code\n         * @param kernel\n         * @param data string representation of JSON\n         */\n        const loadData = (kernel: IKernelConnection, data: string) => {\n            const code = `import json\\ndata_from_host = json.loads(r'''${data}''')`;\n            const result = kernel.requestExecute({ code: code });\n            console.debug(\"Execution result:\", result);\n        };\n    }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}